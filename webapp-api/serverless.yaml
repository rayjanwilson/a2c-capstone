service: a2c-capstone

plugins:
  - serverless-python-requirements
  - aws-amplify-serverless-plugin

# packaging optimization
package:
  individually: true
  excludeDevDependencies: true
  include:
    - "!./**"
    - "lambdas/**"
  exclude:
    - "**"

provider:
  name: aws
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, self:custom.defaultStage}

  runtime: python3.7
  apiname: powerspec-${self:provider.stage}
  timeout: 30
  tracing:
    lambda: true
  apiKeys:
    - apikey_${self:provider.stage}
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: 
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"  

custom:
  defaultStage: dev
  defaultRegion: us-east-1
  false: false
  enable_docker: ${opt:enable_docker, self:custom.false}

  pythonRequirements:
    # dockerImage: lambci/lambda:build-python3.7   # this allows you to use a custom docker image
    dockerizePip: ${self:custom.enable_docker}
    slim: true
    noDeploy: []  #allows us to bundle our own boto3

  amplify:
    - filename: ../webapp/src/aws-exports.js
      type: javascript
      appClient: UserPoolClientWeb

functions:
  Sample:
    module: lambdas
    handler: sample.handler
    events:
      - http:
          path: /sample
          method: get
          cors: true

resources:
  Resources:
    WebappBucket:
      Type: AWS::S3::Bucket
      # DeletionPolicy: Retain
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - "*"
              ExposedHeaders:
                - x-amz-server-side-encryption
                - x-amz-request-id
                - x-amz-id-2
                - ETag
              Id: S3CORSRuleId1
              MaxAge: "3000"

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref "WebappBucket"
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref "WebappBucket"
                  - /*

    AuthRole:
      Type: AWS::IAM::Role
      Properties:
        # RoleName: A2CAuthRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "id1"
              Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        # Policies:
        #   - PolicyName: "CognitoS3Policy"
        #     PolicyDocument:
        #       Version: "2012-10-17"
        #       Statement:
        #         - Effect: Allow
        #           Action:
        #             - s3:GetObject
        #           Resource:
        #             - arn:aws:s3:::${self:custom.s3_translated_bucket_name}/private/
        #             - arn:aws:s3:::${self:custom.s3_translated_bucket_name}/private/*

    UnauthRole:
      Type: AWS::IAM::Role
      Properties:
        # RoleName: A2CUnauthRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: ""
              Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: unauthenticated

    UserPool:
      # Created upon user selection
      # Depends on SNS Role for Arn if MFA is enabled
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: A2C-userPool-${self:provider.stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
        AutoVerifiedAttributes: [email]
        EmailVerificationMessage: Your verification code is {####}
        EmailVerificationSubject: Your verification code
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        MfaConfiguration: OFF
        # SmsVerificationMessage: !Ref smsVerificationMessage
        # SmsConfiguration:
        #   SnsCallerArn: !GetAtt SNSRole.Arn
        #   ExternalId: !Ref roleExternalId

    UserPoolClientWeb:
      # Created provide application access to user pool
      # Depends on UserPool for ID reference
      Type: AWS::Cognito::UserPoolClient
      DependsOn: UserPool
      Properties:
        ClientName: a2c_app_clientWeb_${self:provider.stage}
        RefreshTokenValidity: 30
        UserPoolId: !Ref UserPool

    UserPoolClient:
      # Created provide application access to user pool
      # Depends on UserPool for ID reference
      Type: AWS::Cognito::UserPoolClient
      DependsOn: UserPool
      Properties:
        ClientName: a2c_app_clientWeb_${self:provider.stage}
        GenerateSecret: true
        RefreshTokenValidity: 30
        UserPoolId: !Ref UserPool

    # BEGIN USER POOL LAMBDA RESOURCES
    UserPoolClientRole:
      # Created to execute Lambda which gets userpool app client config values
      Type: AWS::IAM::Role
      DependsOn: UserPoolClient
      Properties:
        RoleName: a2cuserpoolClientLambdaRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - "sts:AssumeRole"

    UserPoolClientLambda:
      # Lambda which gets userpool app client config values
      # Depends on UserPool for id
      # Depends on UserPooloolClientRole for role ARN
      Type: AWS::Lambda::Function
      DependsOn: UserPoolClientRole
      Properties:
        Code:
          ZipFile: !Join
            - |+
            - - "const response = require('cfn-response');"
              - "const aws = require('aws-sdk');"
              - "const identity = new aws.CognitoIdentityServiceProvider();"
              - "exports.handler = (event, context, callback) => {"
              - " if (event.RequestType == 'Delete') { "
              - "   response.send(event, context, response.SUCCESS, {})"
              - " }"
              - " if (event.RequestType == 'Update' || event.RequestType == 'Create') {"
              - "   const params = {"
              - "     ClientId: event.ResourceProperties.clientId,"
              - "     UserPoolId: event.ResourceProperties.userpoolId"
              - "   };"
              - "   identity.describeUserPoolClient(params).promise()"
              - "     .then((res) => {"
              - "       response.send(event, context, response.SUCCESS, {'appSecret': res.UserPoolClient.ClientSecret});"
              - "     })"
              - "     .catch((err) => {"
              - "       response.send(event, context, response.FAILURE, {err});"
              - "     });"
              - " }"
              - "};"
        Handler: index.handler
        Runtime: nodejs8.10
        Timeout: "300"
        Role: !GetAtt
          - UserPoolClientRole
          - Arn

    UserPoolClientLambdaPolicy:
      # Sets userpool policy for the role that executes the Userpool Client Lambda
      # Depends on UserPool for Arn
      # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
      Type: AWS::IAM::Policy
      DependsOn: UserPoolClientLambda
      Properties:
        PolicyName: a2c_userpoolclient_lambda_log_policy-${self:provider.stage}
        Roles:
          - a2cuserpoolClientLambdaRole-${self:provider.stage}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:DescribeUserPoolClient"
              Resource: !GetAtt UserPool.Arn

    UserPoolClientInputs:
      # Values passed to Userpool client Lambda
      # Depends on UserPool for Id
      # Depends on UserPoolClient for Id
      # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
      Type: Custom::LambdaCallout
      # DependsOn: UserPoolClientLogPolicy
      DependsOn: UserPoolClientLambdaPolicy
      Properties:
        ServiceToken: !GetAtt UserPoolClientLambda.Arn
        clientId: !Ref UserPoolClient
        userpoolId: !Ref UserPool

    # BEGIN IDENTITY POOL RESOURCES
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      DependsOn: UserPoolClientInputs
      Properties:
        IdentityPoolName: a2c_identity_pool_${self:provider.stage}
        CognitoIdentityProviders:
          - ClientId: !Ref UserPoolClient
            ProviderName: !Join
              - ""
              - - cognito-idp.${self:provider.region}.amazonaws.com/
                - !Ref UserPool
          - ClientId: !Ref UserPoolClientWeb
            ProviderName: !Join
              - ""
              - - cognito-idp.${self:provider.region}.amazonaws.com/
                - !Ref UserPool
        AllowUnauthenticatedIdentities: false

    IdentityPoolRoleMap:
      # Created to map Auth and Unauth roles to the identity pool
      # Depends on Identity Pool for ID ref
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      DependsOn: IdentityPool
      Properties:
        IdentityPoolId: !Ref IdentityPool
        Roles:
          unauthenticated: !GetAtt UnauthRole.Arn
          authenticated: !GetAtt AuthRole.Arn

